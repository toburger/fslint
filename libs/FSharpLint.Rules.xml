<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>FSharpLint.Rules</name></assembly>
<members>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharpLint.Framework.HintMatcher.LambdaArgumentMatch.NoMatch">
<summary>
 bool = whether or not argument was actually a wildcard (could be false if the hint argument is a wildcard but the actual argument was not).
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:FSharpLint.Framework.HintMatcher.getHintsFromConfig">
<summary>
 Memoized getHints.
</summary>
</member>
<member name="M:FSharpLint.Framework.HintMatcher.getHints(Microsoft.FSharp.Collections.FSharpMap{System.String,FSharpLint.Framework.Configuration.Analyser})">
<summary>
 Gets a list of hints from the config file.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FSharpLint.Framework.HintMatcher.removeParens(Microsoft.FSharp.Compiler.Ast.SynExpr)">
<summary>
 Extracts an expression from parentheses e.g. ((x + 4)) -&gt; x + 4
</summary>
</member>
<member name="M:FSharpLint.Framework.HintMatcher.removeAutoGeneratedMatchesFromLambda(System.Int32)">
<summary>
 A match clause is generated by the compiler for each wildcard argument, 
 this function extracts the body expression of the lambda from those statements.
</summary>
</member>
<member name="">

</member>
<member name="M:FSharpLint.Framework.HintMatcher.identAsDecompiledOpName(Microsoft.FSharp.Compiler.Ast.Ident)">
<summary>
 Converts an operator name e.g. op_Add to the operator symbol e.g. +
</summary>
</member>
<member name="M:FSharpLint.Framework.HintMatcher.matchConst(Microsoft.FSharp.Compiler.Ast.SynConst)">
<summary>
 Converts a SynConst (FSharp AST) into a Constant (hint AST).
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharpLint.Framework.HintMatcher">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FSharpLint.Rules.Binding.checkForBindingToAWildcard(FSharpLint.Framework.Ast.VisitorInfo,Microsoft.FSharp.Compiler.Ast.SynPat,Microsoft.FSharp.Compiler.Range.range)">
<summary>
 Checks if any code uses &apos;let _ = ...&apos; and suggests to use the ignore function.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharpLint.Rules.Binding">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharpLint.Rules.CyclomaticComplexity">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharpLint.Rules.FunctionReimplementation">
<summary>
 Checks a lambda function is not simply an &apos;abbreviation&apos; of another function.
 For example it will warn when it finds a lambda such as: fun a b -&gt; a * b as it is exactly the same as (*).
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FSharpLint.Rules.NameConventions.visitor(FSharpLint.Framework.Ast.VisitorInfo,Microsoft.FSharp.Compiler.SourceCodeServices.CheckFileResults,FSharpLint.Framework.Ast.CurrentNode)">
<summary>
 Gets a visitor that checks all nodes on the AST where an identifier may be declared, 
 and post errors if any violate best practice guidelines.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:FSharpLint.Rules.NameConventions.expectPascalCase">
<summary>
 Checks an identifier is pascal case, if not an error is posted.
</summary>
</member>
<member name="P:FSharpLint.Rules.NameConventions.expectCamelCase">
<summary>
 Checks an identifier is camel case, if not an error is posted.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharpLint.Rules.NameConventions.CheckIdentifiers">

</member>
<member name="T:FSharpLint.Rules.NameConventions">
<summary>
 Checks whether any code in an F# program violates best practices for naming identifiers.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FSharpLint.Rules.NestedStatements.isCompilerGeneratedMatch(FSharpLint.Framework.Ast.AstNode)">
<summary>
 Lambda wildcard arguments are named internally as _argN, a match is then generated for them in the AST.
 e.g. fun _ -&gt; () is represented in the AST as fun _arg1 -&gt; match _arg1 with | _ -&gt; ().
 This function returns true if the given match statement is compiler generated for a lmabda wildcard argument.
</summary>
</member>
<member name="M:FSharpLint.Rules.NestedStatements.isLambdaALambdaArgument(FSharpLint.Framework.Ast.AstNode)">
<summary>
 Lambda arguments (after the first argument) are curried and represented as such internally.
 e.g. fun x y -&gt; () will be represented in the AST as fun x -&gt; fun y -&gt; ().
 This function returns true if the given lambda is an argument.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharpLint.Rules.NestedStatements">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharpLint.Rules.NumberOfItems">
<summary>
 Checks if a function is declared with more than a configurable number of parameters.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharpLint.Rules.SourceLength">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharpLint.Rules.Typography">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharpLint.Rules.XmlDocumentation">
<summary>
 Rules to enforce the use of XML documentation in various places.
</summary>
</member>
</members>
</doc>
